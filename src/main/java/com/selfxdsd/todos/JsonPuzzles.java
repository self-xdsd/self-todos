/**
 * Copyright (c) 2020-2021, Self XDSD Contributors
 * All rights reserved.
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to read the Software only. Permission is hereby NOT GRANTED to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software.
 * <p>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 * OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.selfxdsd.todos;

import com.selfxdsd.api.Commit;
import com.selfxdsd.api.Project;

import javax.json.*;
import java.io.PrintWriter;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * Representation of Self puzzles from processing a JSON Document
 * generated by `todo-finder-cli`.
 * of a String input.
 * @author criske
 * @version $Id$
 * @since 0.0.2
 * @checkstyle LineLength (300 lines)
 */
public final class JsonPuzzles implements Puzzles<String> {

    /**
     * Project where these puzzles are coming from.
     */
    private final Project project;

    /**
     * Commit which triggered everything.
     */
    private final Commit commit;

    /**
     * Processed puzzles.
     */
    private final List<Puzzle> puzzles;

    /**
     * Ctor.
     * @param project Project where these puzzles are coming from.
     * @param commit Commit which triggered everything.
     */
    public JsonPuzzles(final Project project, final Commit commit) {
        this.project = project;
        this.commit = commit;
        this.puzzles = new ArrayList<>();
    }


    @Override
    public void process(final String input) throws PuzzlesProcessingException {
        try (JsonReader reader = Json.createReader(new StringReader(input))) {
            final JsonArray jsonArray = reader.readArray();
            final Puzzle.Builder builder = new Puzzle.Builder()
                .setProject(this.project)
                .setEmail("")
                .setRole("DEV");
            for (final JsonValue jsonValue : jsonArray) {
                final JsonObject jsonObject = jsonValue.asJsonObject();
                final String[] fullNameSplit = this.project.repoFullName()
                    .split("/");
                builder
                    .setCommit(this.project
                        .projectManager()
                        .provider()
                        .repo(fullNameSplit[0], fullNameSplit[1])
                        .commits()
                        .latest())
                    .setId(Integer.toString(jsonObject.getInt("id")))
                    .setStart(jsonObject.getInt("start"))
                    .setEnd(jsonObject.getInt("end"))
                    .setTicket(Integer.parseInt(jsonObject
                        .getString("originatingTicket").substring(1)))
                    .setEstimate(jsonObject.getInt("estimatedTime"))
                    .setFile(jsonObject.getString("file"))
                    .setBody(jsonObject.getString("body"))
                    .setAuthor(jsonObject.getString("author", ""))
                    .setTime(jsonObject.getString("timestamp", ""));
                puzzles.add(builder.build());
            }
        } catch (final JsonException
            | NullPointerException
            | ClassCastException
            | NumberFormatException exception) {
            final StringWriter stacktrace = new StringWriter();
            exception.printStackTrace(new PrintWriter(stacktrace));
            String author = this.commit.author();
            if(author != null && !author.isEmpty()) {
                author = "@" + author + " ";
            } else {
                author = "";
            }
            this.commit.comments().post(
                author
                    + "There's been a problem while "
                    + "parsing the to-dos in the code. Most likely, the format "
                    + "is not correct. Read more about the to-do format [here]"
                    + "(https://docs.self-xdsd.com/microtasking.html#anatomy-of-a-todo). "
                    + "If you can't understand the error, just open an Issue "
                    + "[here](https://github.com/self-xdsd/self-todos).\n\n"
                    + "Parse result:\n\n"
                    + "```\n"
                    + input
                    + "```\n\n"
                    + "Error:\n\n"
                    + "```java\n"
                    + exception.getMessage() + "\n\n"
                    + stacktrace.toString() + "\n"
                    + "```"
            );
            throw new PuzzlesProcessingException(exception);
        }
    }

    @Override
    public Iterator<Puzzle> iterator() {
        return puzzles.iterator();
    }

}
